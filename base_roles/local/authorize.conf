# Keep in mind if you do anything via UI when it comes to roles,
# it will be saved in $SPLUNK_HOME/etc/system/local.
# Migrate authorize.conf AND local.meta to this app in case of any UI changes.
# A strict index naming concept is crucial for this to work.
# if you build Data Models on top of indexes, you always have to give read permissions for that role to a data model as well.


##### EXAMPLES

# first you have to define an index naming concept which works for you

# for example: [stage]_[dataSource] or [stage]_[dataSource]_[retentionTimeInDays] 

# dev environments:		d_sap, d_linux, d_apache_webserver		(d_sap_90, d_linux_30, d_apache_webserver_120)
# test environments:	t_wineventlog, t_dhcp		(t_wineventlog_180, t_dhcp_180)
# prod environments:	p_msad, p_vmware 	(p_msad_365, p_vmware_365)

# Everytime you create a new index, you will create an index role for it as well.
# For bigger environments, you can separate your index roles into different apps.
# base_roles_dev
# base_roles_test
# base_roles_prod
# So you don't get lost some day.




### INDEX ROLES

## prefix i-
# no spaces allowed in srchIndexesAllowed and srchIndexesDefault between semicolons
#
#[role_i-]
#srchIndexesAllowed = index1;index2
#srchIndexesDefault = index1;index2

# if you want to give internal log access only to specific people/groups
[role_i-all-splunk-internal]
srchIndexesAllowed = _* 

# be careful who to give this role to. 
# setting srchIndexesDefault to an empty index is to train users to always specify an index (or multiple) in their searches.
# keep in mind that Enterprise Security brings its own user roles (as well as ITSI)
[role_i-all_indexes]
srchIndexesAllowed = *
srchIndexesDefault = void


# this is an example what a "windows" index role could look like
[role_i-all-windows]
srchIndexesAllowed = *_msad;*_perfmon;*_windows;*_winevent*;*_dhcp
srchIndexesDefault = *_msad;*_perfmon;*_windows;*_winevent*;*_dhcp

# Example w/ retention time attached, the _* is in case you have multiple indexes of the same data source with different retention times:
#[role_i-all-windows]
#srchIndexesAllowed = *_msad_*;*_perfmon_*;*_windows_*;*_winevent*_*;*_dhcp_*
#srchIndexesDefault = *_msad_*;*_perfmon_*;*_windows_*;*_winevent*_*;*_dhcp_*

# sap example
[role_i-all-sap]
srchIndexesAllowed = *_sap;*_sap_* 
srchIndexesDefault = *_sap;*_sap_*

[role_i-dev-sap]
srchIndexesAllowed = d_sap;d_sap_* 
srchIndexesDefault = d_sap;d_sap_*

# in case you want to build an ITSI role app on top of this one,
# I'd recommend doing a separate app for ITSI roles - or just let them reside inside ITSI
[role_i-itsi]
srchIndexesAllowed = itsi_*;*_snmaptrapd;anomaly_detection;history
srchIndexesDefault = itsi_*;*_snmptrapd;anomaly_detection;history

# e.g. the VMware Add-on comes with several indexes
[role_i-test-vmware]
srchIndexesAllowed = t_vmware*
srchIndexesDefault = t_vmware*

[role_i-all-vmware]
srchIndexesAllowed = *_vmware*
srchIndexesDefault = *_vmware*

[role_i-prod-os]
srchIndexesAllowed = p_windows;p_linux;p_os;p_nmon;p_sysmon;p_perfmon;p_aix;
srchIndexesDefault = p_windows;p_linux;p_os;p_nmon;p_sysmon;p_perfmon;p_aix;

[role_i-all-dev-indexes]
srchIndexesAllowed = d_*
srchIndexesDefault = d_*

[role_i-all-test-indexes]
srchIndexesAllowed = t_*
srchIndexesDefault = t_*

[role_i-all-prod-indexes]
srchIndexesAllowed = p_*
srchIndexesDefault = p_*




### CAPABILITY ROLES


# if you need anything besides user, power user and admin:
# beware that capabilities can only be enabled, not disabled. So import capabilities carefully
## prefix c-
#
#[role_c-dont_crush_my_servers]
# you definitely want to set srchMaxTime, as the default is really high
#srchMaxTime = 5m
#rtSrchJobsQuota = 3
#srchDiskQuota = 120



### USER ROLES

# for these roles, your goal should be to only use importRoles here and assign this role to a user or LDAP group.
# import capability roles and index roles here.

#[role_r-name]
#importRoles =

[role_r-auditor]
importRoles = user;i-all-splunk-internal;i-all-prod-indexes

[role_r-splunk-admin]
importRoles = admin;i-all_splunk_internal

[role_r-qa-team]
importRoles = user;i-all-test-indexes

[role_r-all-mighty-dev]
importRoles = power;i-all-dev-indexes



# user, poweruser and admin are exceptions that's why we have to manually edit them here

### change default role behaviour (as they can search all indexes by default)
# especially in bigger environments, this will prevent searching loads of data, by accident or not
[role_user]
srchMaxTime = 5m
rtSrchJobsQuota = 4
srchIndexesAllowed = void
srchIndexesDefault = void

[role_power]
srchMaxTime = 10m
rtSrchJobsQuota = 6
srchIndexesAllowed = void
srchIndexesDefault = void

[role_admin]
srchMaxTime = 15m
rtSrchJobsQuota = 8
srchIndexesAllowed = void;_*
srchIndexesDefault = void;_*

# check your roles and especially all imports with a search like that in Splunk:
#| rest /services/authorization/roles
#| fields - eai:*
#| table title, capabilities, imported_*, rt*, srch*, grantableRoles, cumulative*, de*
#| rename title as Role


# feedback welcome, contact @Skalli on Slack


